/* tslint:disable */
/* eslint-disable */
/**
 * Todo List API
 * REST API для управления задачами (todo-list).
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateTodo
 */
export interface CreateTodo {
    /**
     * Заголовок задачи
     * @type {string}
     * @memberof CreateTodo
     */
    'title': string;
    /**
     * Подробное описание задачи
     * @type {string}
     * @memberof CreateTodo
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Код ошибки
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * Сообщение об ошибке
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Todo
 */
export interface Todo {
    /**
     * Уникальный идентификатор задачи
     * @type {string}
     * @memberof Todo
     */
    'id'?: string;
    /**
     * Заголовок задачи
     * @type {string}
     * @memberof Todo
     */
    'title'?: string;
    /**
     * Подробное описание задачи
     * @type {string}
     * @memberof Todo
     */
    'description'?: string;
    /**
     * Статус задачи
     * @type {string}
     * @memberof Todo
     */
    'status'?: TodoStatusEnum;
    /**
     * Дата и время создания задачи
     * @type {string}
     * @memberof Todo
     */
    'createdAt'?: string;
    /**
     * Дата и время последнего обновления задачи
     * @type {string}
     * @memberof Todo
     */
    'updatedAt'?: string;
}

export const TodoStatusEnum = {
    Completed: 'completed',
    Pending: 'pending'
} as const;

export type TodoStatusEnum = typeof TodoStatusEnum[keyof typeof TodoStatusEnum];

/**
 * 
 * @export
 * @interface UpdateTodo
 */
export interface UpdateTodo {
    /**
     * Новый заголовок задачи
     * @type {string}
     * @memberof UpdateTodo
     */
    'title'?: string;
    /**
     * Новое описание задачи
     * @type {string}
     * @memberof UpdateTodo
     */
    'description'?: string;
    /**
     * Новый статус задачи
     * @type {string}
     * @memberof UpdateTodo
     */
    'status'?: UpdateTodoStatusEnum;
}

export const UpdateTodoStatusEnum = {
    Completed: 'completed',
    Pending: 'pending'
} as const;

export type UpdateTodoStatusEnum = typeof UpdateTodoStatusEnum[keyof typeof UpdateTodoStatusEnum];


/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Добавляет новую задачу в список.
         * @summary Создать новую задачу
         * @param {CreateTodo} createTodo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodo: async (createTodo: CreateTodo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTodo' is not null or undefined
            assertParamExists('createTodo', 'createTodo', createTodo)
            const localVarPath = `/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTodo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Удаляет задачу по её ID.
         * @summary Удалить задачу
         * @param {string} id Уникальный идентификатор задачи
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodo: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTodo', 'id', id)
            const localVarPath = `/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Возвращает информацию о задаче по её ID.
         * @summary Получить задачу по ID
         * @param {string} id Уникальный идентификатор задачи
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTodoById', 'id', id)
            const localVarPath = `/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Возвращает список задач с возможностью фильтрации по статусу и текстовому запросу.
         * @summary Получить список задач
         * @param {GetTodosStatusEnum} [status] Фильтрация задач по статусу (&#x60;completed&#x60;, &#x60;pending&#x60;).
         * @param {string} [search] Фильтрация задач по ключевым словам в заголовке или описании.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodos: async (status?: GetTodosStatusEnum, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/todos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Обновляет заголовок, описание или статус задачи.
         * @summary Обновить задачу
         * @param {string} id Уникальный идентификатор задачи
         * @param {UpdateTodo} updateTodo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo: async (id: string, updateTodo: UpdateTodo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTodo', 'id', id)
            // verify required parameter 'updateTodo' is not null or undefined
            assertParamExists('updateTodo', 'updateTodo', updateTodo)
            const localVarPath = `/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTodo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Добавляет новую задачу в список.
         * @summary Создать новую задачу
         * @param {CreateTodo} createTodo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTodo(createTodo: CreateTodo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTodo(createTodo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.createTodo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Удаляет задачу по её ID.
         * @summary Удалить задачу
         * @param {string} id Уникальный идентификатор задачи
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTodo(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTodo(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.deleteTodo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Возвращает информацию о задаче по её ID.
         * @summary Получить задачу по ID
         * @param {string} id Уникальный идентификатор задачи
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodoById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodoById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.getTodoById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Возвращает список задач с возможностью фильтрации по статусу и текстовому запросу.
         * @summary Получить список задач
         * @param {GetTodosStatusEnum} [status] Фильтрация задач по статусу (&#x60;completed&#x60;, &#x60;pending&#x60;).
         * @param {string} [search] Фильтрация задач по ключевым словам в заголовке или описании.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTodos(status?: GetTodosStatusEnum, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTodos(status, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.getTodos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Обновляет заголовок, описание или статус задачи.
         * @summary Обновить задачу
         * @param {string} id Уникальный идентификатор задачи
         * @param {UpdateTodo} updateTodo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTodo(id: string, updateTodo: UpdateTodo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTodo(id, updateTodo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.updateTodo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * Добавляет новую задачу в список.
         * @summary Создать новую задачу
         * @param {CreateTodo} createTodo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTodo(createTodo: CreateTodo, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.createTodo(createTodo, options).then((request) => request(axios, basePath));
        },
        /**
         * Удаляет задачу по её ID.
         * @summary Удалить задачу
         * @param {string} id Уникальный идентификатор задачи
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodo(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTodo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Возвращает информацию о задаче по её ID.
         * @summary Получить задачу по ID
         * @param {string} id Уникальный идентификатор задачи
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodoById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.getTodoById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Возвращает список задач с возможностью фильтрации по статусу и текстовому запросу.
         * @summary Получить список задач
         * @param {GetTodosStatusEnum} [status] Фильтрация задач по статусу (&#x60;completed&#x60;, &#x60;pending&#x60;).
         * @param {string} [search] Фильтрация задач по ключевым словам в заголовке или описании.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTodos(status?: GetTodosStatusEnum, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Todo>> {
            return localVarFp.getTodos(status, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Обновляет заголовок, описание или статус задачи.
         * @summary Обновить задачу
         * @param {string} id Уникальный идентификатор задачи
         * @param {UpdateTodo} updateTodo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTodo(id: string, updateTodo: UpdateTodo, options?: RawAxiosRequestConfig): AxiosPromise<Todo> {
            return localVarFp.updateTodo(id, updateTodo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     * Добавляет новую задачу в список.
     * @summary Создать новую задачу
     * @param {CreateTodo} createTodo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public createTodo(createTodo: CreateTodo, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).createTodo(createTodo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Удаляет задачу по её ID.
     * @summary Удалить задачу
     * @param {string} id Уникальный идентификатор задачи
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public deleteTodo(id: string, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).deleteTodo(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Возвращает информацию о задаче по её ID.
     * @summary Получить задачу по ID
     * @param {string} id Уникальный идентификатор задачи
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public getTodoById(id: string, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).getTodoById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Возвращает список задач с возможностью фильтрации по статусу и текстовому запросу.
     * @summary Получить список задач
     * @param {GetTodosStatusEnum} [status] Фильтрация задач по статусу (&#x60;completed&#x60;, &#x60;pending&#x60;).
     * @param {string} [search] Фильтрация задач по ключевым словам в заголовке или описании.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public getTodos(status?: GetTodosStatusEnum, search?: string, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).getTodos(status, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Обновляет заголовок, описание или статус задачи.
     * @summary Обновить задачу
     * @param {string} id Уникальный идентификатор задачи
     * @param {UpdateTodo} updateTodo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public updateTodo(id: string, updateTodo: UpdateTodo, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).updateTodo(id, updateTodo, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetTodosStatusEnum = {
    Completed: 'completed',
    Pending: 'pending'
} as const;
export type GetTodosStatusEnum = typeof GetTodosStatusEnum[keyof typeof GetTodosStatusEnum];


